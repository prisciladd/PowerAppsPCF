/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./TSWebAPI/index.ts":
/*!***************************!*\
  !*** ./TSWebAPI/index.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TSWebAPI = void 0;\nvar TSWebAPI = /** @class */function () {\n  /**\r\n   * Empty constructor.\r\n   */\n  function TSWebAPI() {}\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n  TSWebAPI.prototype.init = function (context, notifyOutputChanged, state, container) {\n    this._context = context;\n    this._controlViewRendered = false;\n    this._container = document.createElement(\"div\");\n    this._container.classList.add(\"TSWebAPI_Container\");\n    container.appendChild(this._container);\n  };\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n  TSWebAPI.prototype.updateView = function (context) {\n    if (!this._controlViewRendered) {\n      this._controlViewRendered = true;\n      // Render Web API Examples\n      this.renderCreateExample();\n      this.renderDeleteExample();\n      this.renderFetchXmlRetrieveMultipleExample();\n      this.renderODataRetrieveMultipleExample();\n      // Render result div to display output of Web API calls\n      this.renderResultsDiv();\n    }\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n  TSWebAPI.prototype.getOutputs = function () {\n    return {};\n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  TSWebAPI.prototype.destroy = function () {\n    // Add code to cleanup control if necessary\n  };\n  /**\r\n  * Helper method to create HTML button that is used for CreateRecord Web API Example\r\n  * @param buttonLabel : Label for button\r\n  * @param buttonId : ID for button\r\n  * @param buttonValue : Value of button (attribute of button)\r\n  * @param onClickHandler : onClick event handler to invoke for the button\r\n  */\n  TSWebAPI.prototype.createHTMLButtonElement = function (buttonLabel, buttonId, buttonValue, onClickHandler) {\n    var button = document.createElement(\"button\");\n    button.innerHTML = buttonLabel;\n    if (buttonValue) {\n      button.setAttribute(\"buttonvalue\", buttonValue);\n    }\n    button.id = buttonId;\n    button.classList.add(\"SampleControl_WebAPI_ButtonClass\");\n    button.addEventListener(\"click\", onClickHandler);\n    return button;\n  };\n  /**\r\n  * Helper method to create HTML Div Element\r\n  * @param elementClassName : Class name of div element\r\n  * @param isHeader : True if 'header' div - adds extra class and post-fix to ID for header elements\r\n  * @param innerText : innerText of Div Element\r\n  */\n  TSWebAPI.prototype.createHTMLDivElement = function (elementClassName, isHeader, innerText) {\n    var div = document.createElement(\"div\");\n    if (isHeader) {\n      div.classList.add(\"SampleControl_WebAPI_Header\");\n      elementClassName += \"_header\";\n    }\n    if (innerText) {\n      div.innerText = innerText.toUpperCase();\n    }\n    div.classList.add(elementClassName);\n    return div;\n  };\n  /**\r\n  * Renders a 'result container' div element to inject the status of the example Web API calls\r\n  */\n  TSWebAPI.prototype.renderResultsDiv = function () {\n    // Render header label for result container\n    var resultDivHeader = this.createHTMLDivElement(\"result_container\", true, \"Result of last action\");\n    this._container.appendChild(resultDivHeader);\n    // Div elements to populate with the result text\n    this._resultContainerDiv = this.createHTMLDivElement(\"result_container\", false, undefined);\n    this._container.appendChild(this._resultContainerDiv);\n    // Init the result container with a notification that the control was loaded\n    this.updateResultContainerText(\"Web API sample custom control loaded\");\n  };\n  /**\r\n  * Helper method to inject HTML into result container div\r\n  * @param statusHTML : HTML to inject into result container\r\n  */\n  TSWebAPI.prototype.updateResultContainerText = function (statusHTML) {\n    if (this._resultContainerDiv) {\n      this._resultContainerDiv.innerHTML = statusHTML;\n    }\n  };\n  /**\r\n  * Helper method to inject error string into result container div after failed Web API call\r\n  * @param errorResponse : error object from rejected promise\r\n  */\n  TSWebAPI.prototype.updateResultContainerTextWithErrorResponse = function (errorResponse) {\n    if (this._resultContainerDiv) {\n      // Retrieve the error message from the errorResponse and inject into the result div\n      var errorHTML = \"Error with Web API call:\";\n      errorHTML += \"<br />\";\n      errorHTML += errorResponse.message;\n      this._resultContainerDiv.innerHTML = errorHTML;\n    }\n  };\n  /**\r\n  * Helper method to generate Label for Create Buttons\r\n  * @param entityNumber : value to set _currencyAttributeNameFriendlyName field to for this button\r\n  */\n  TSWebAPI.prototype.getCreateRecordButtonLabel = function (entityNumber) {\n    return \"Create record with \" + TSWebAPI._currencyAttributeNameFriendlyName + \" of \" + entityNumber;\n  };\n  /**\r\n  * Helper method to generate ID for Create button\r\n  * @param entityNumber : value to set _currencyAttributeNameFriendlyName field to for this button\r\n  */\n  TSWebAPI.prototype.getCreateButtonId = function (entityNumber) {\n    return \"create_button_\" + entityNumber;\n  };\n  /**\r\n  * Event Handler for onClick of create record button\r\n  * @param event : click event\r\n  */\n  TSWebAPI.prototype.createButtonOnClickHandler = function (event) {\n    // Retrieve the value to set the currency field to from the button's attribute\n    var currencyAttributeValue = parseInt(event.srcElement.attributes.getNamedItem(\"buttonvalue\").value);\n    // Generate unique record name by appending timestamp to _requiredAttributeValue\n    var recordName = TSWebAPI._requiredAttributeValue + \"_\" + Date.now();\n    // Set the values for the attributes we want to set on the new record\n    // If you want to set additional attributes on the new record, add to data dictionary as key/value pair\n    var data = {};\n    data[TSWebAPI._requiredAttributeName] = recordName;\n    data[TSWebAPI._currencyAttributeName] = currencyAttributeValue;\n    // store reference to 'this' so it can be used in the callback method\n    var thisRef = this;\n    // Invoke the Web API to create the new record\n    this._context.webAPI.createRecord(TSWebAPI._entityName, data).then(function (response) {\n      // Callback method for successful creation of new record\n      // Get the ID of the new record created\n      var id = response.id;\n      // Generate HTML to inject into the result div to showcase the fields and values of the new record that is created\n      var resultHtml = \"Created new \" + TSWebAPI._entityName + \" record with below values:\";\n      resultHtml += \"<br />\";\n      resultHtml += \"<br />\";\n      resultHtml += \"id: \" + id;\n      resultHtml += \"<br />\";\n      resultHtml += \"<br />\";\n      resultHtml += TSWebAPI._requiredAttributeName + \": \" + recordName;\n      resultHtml += \"<br />\";\n      resultHtml += \"<br />\";\n      resultHtml += TSWebAPI._currencyAttributeName + \": \" + currencyAttributeValue;\n      thisRef.updateResultContainerText(resultHtml);\n    }, function (errorResponse) {\n      // Error handling code here - record failed to be created\n      thisRef.updateResultContainerTextWithErrorResponse(errorResponse);\n    });\n  };\n  /**\r\n  * Event Handler for onClick of delete record button\r\n  * @param event : click event\r\n  */\n  TSWebAPI.prototype.deleteButtonOnClickHandler = function () {\n    var _this = this;\n    // Invoke a lookup dialog to allow the user to select an existing record of type _entityName to delete\n    var lookUpOptions = {\n      entityTypes: [TSWebAPI._entityName]\n    };\n    // store reference to 'this' so it can be used in the callback method\n    var thisRef = this;\n    var lookUpPromise = this._context.utils.lookupObjects(lookUpOptions);\n    lookUpPromise.then(\n    // Callback method - invoked after user has selected an item from the lookup dialog\n    // Data parameter is the item selected in the lookup dialog\n    function (data) {\n      if (data && data[0]) {\n        // Get the ID and entityType of the record that was selected by the lookup\n        var id = data[0].id.guid;\n        var entityType = data[0].etn;\n        // Invoke the deleteRecord method of the WebAPI to delete the selected record\n        _this._context.webAPI.deleteRecord(entityType, id).then(function (response) {\n          // Record was deleted successfully\n          var responseId = response.id;\n          var responseEntityType = response.name;\n          // Generate HTML to inject into the result div to showcase the deleted record \n          thisRef.updateResultContainerText(\"Deleted \" + responseEntityType + \" record with ID: \" + responseId);\n        }, function (errorResponse) {\n          // Error handling code here\n          thisRef.updateResultContainerTextWithErrorResponse(errorResponse);\n        });\n      }\n    }, function (error) {\n      // Error handling code here\n      thisRef.updateResultContainerTextWithErrorResponse(error);\n    });\n  };\n  /**\r\n  * Event Handler for onClick of calculate average value button\r\n  * @param event : click event\r\n  */\n  TSWebAPI.prototype.calculateAverageButtonOnClickHandler = function () {\n    // Build FetchXML to retrieve the average value of _currencyAttributeName field for all _entityName records\n    // Add a filter to only aggregate on records that have _currencyAttributeName not set to null\n    var fetchXML = \"<fetch distinct='false' mapping='logical' aggregate='true'>\";\n    fetchXML += \"<entity name='\" + TSWebAPI._entityName + \"'>\";\n    fetchXML += \"<attribute name='\" + TSWebAPI._currencyAttributeName + \"' aggregate='avg' alias='average_val' />\";\n    fetchXML += \"<filter>\";\n    fetchXML += \"<condition attribute='\" + TSWebAPI._currencyAttributeName + \"' operator='not-null' />\";\n    fetchXML += \"</filter>\";\n    fetchXML += \"</entity>\";\n    fetchXML += \"</fetch>\";\n    // store reference to 'this' so it can be used in the callback method\n    var thisRef = this;\n    // Invoke the Web API RetrieveMultipleRecords method to calculate the aggregate value\n    this._context.webAPI.retrieveMultipleRecords(TSWebAPI._entityName, \"?fetchXml=\" + fetchXML).then(function (response) {\n      // Retrieve multiple completed successfully -- retrieve the averageValue \n      var averageVal = response.entities[0].average_val;\n      // Generate HTML to inject into the result div to showcase the result of the RetrieveMultiple Web API call\n      var resultHTML = \"Average value of \" + TSWebAPI._currencyAttributeNameFriendlyName + \" attribute for all \" + TSWebAPI._entityName + \" records: \" + averageVal;\n      thisRef.updateResultContainerText(resultHTML);\n    }, function (errorResponse) {\n      // Error handling code here\n      thisRef.updateResultContainerTextWithErrorResponse(errorResponse);\n    });\n  };\n  /**\r\n  * Event Handler for onClick of calculate record count button\r\n  * @param event : click event\r\n  */\n  TSWebAPI.prototype.refreshRecordCountButtonOnClickHandler = function () {\n    // Generate OData query string to retrieve the _currencyAttributeName field for all _entityName records\n    // Add a filter to only retrieve records with _requiredAttributeName field which contains _requiredAttributeValue\n    var queryString = \"?$select=\" + TSWebAPI._currencyAttributeName + \"&$filter=contains(\" + TSWebAPI._requiredAttributeName + \",'\" + TSWebAPI._requiredAttributeValue + \"')\";\n    // store reference to 'this' so it can be used in the callback method\n    var thisRef = this;\n    // Invoke the Web API Retrieve Multiple call\n    this._context.webAPI.retrieveMultipleRecords(TSWebAPI._entityName, queryString).then(function (response) {\n      // Retrieve Multiple Web API call completed successfully\n      var count1 = 0;\n      var count2 = 0;\n      var count3 = 0;\n      // Loop through each returned record\n      for (var _i = 0, _a = response.entities; _i < _a.length; _i++) {\n        var entity = _a[_i];\n        // Retrieve the value of _currencyAttributeName field\n        var value = entity[TSWebAPI._currencyAttributeName];\n        // Check the value of _currencyAttributeName field and increment the correct counter\n        if (value == 100) {\n          count1++;\n        } else if (value == 200) {\n          count2++;\n        } else if (value == 300) {\n          count3++;\n        }\n      }\n      // Generate HTML to inject into the fetch xml status div to showcase the results of the OData retrieve example\n      var innerHtml = \"Use above buttons to create or delete a record to see count update\";\n      innerHtml += \"<br />\";\n      innerHtml += \"<br />\";\n      innerHtml += \"Count of \" + TSWebAPI._entityName + \" records with \" + TSWebAPI._currencyAttributeName + \" of 100: \" + count1;\n      innerHtml += \"<br />\";\n      innerHtml += \"Count of \" + TSWebAPI._entityName + \" records with \" + TSWebAPI._currencyAttributeName + \" of 200: \" + count2;\n      innerHtml += \"<br />\";\n      innerHtml += \"Count of \" + TSWebAPI._entityName + \" records with \" + TSWebAPI._currencyAttributeName + \" of 300: \" + count3;\n      // Inject the HTML into the fetch xml status div\n      if (thisRef._odataStatusContainerDiv) {\n        thisRef._odataStatusContainerDiv.innerHTML = innerHtml;\n      }\n      // Inject a success message into the result div\n      thisRef.updateResultContainerText(\"Record count refreshed\");\n    }, function (errorResponse) {\n      // Error handling code here\n      thisRef.updateResultContainerTextWithErrorResponse(errorResponse);\n    });\n  };\n  /**\r\n  * Renders example use of CreateRecord Web API\r\n  */\n  TSWebAPI.prototype.renderCreateExample = function () {\n    // Create header label for Web API sample\n    var headerDiv = this.createHTMLDivElement(\"create_container\", true, \"Click to create \" + TSWebAPI._entityName + \" record\");\n    this._container.appendChild(headerDiv);\n    // Create button 1 to create a record with the revenue field set to 100\n    var value1 = \"100\";\n    this._createEntity1Button = this.createHTMLButtonElement(this.getCreateRecordButtonLabel(value1), this.getCreateButtonId(value1), value1, this.createButtonOnClickHandler.bind(this));\n    // Create button 2 to create a record with the revenue field set to 200\n    var value2 = \"200\";\n    this._createEntity2Button = this.createHTMLButtonElement(this.getCreateRecordButtonLabel(value2), this.getCreateButtonId(value2), value2, this.createButtonOnClickHandler.bind(this));\n    // Create button 3 to create a record with the revenue field set to 300\n    var value3 = \"300\";\n    this._createEntity3Button = this.createHTMLButtonElement(this.getCreateRecordButtonLabel(value3), this.getCreateButtonId(value3), value3, this.createButtonOnClickHandler.bind(this));\n    // Append all button HTML elements to custom control container div\n    this._container.appendChild(this._createEntity1Button);\n    this._container.appendChild(this._createEntity2Button);\n    this._container.appendChild(this._createEntity3Button);\n  };\n  /**\r\n  * Renders example use of DeleteRecord Web API\r\n  */\n  TSWebAPI.prototype.renderDeleteExample = function () {\n    // Create header label for Web API sample\n    var headerDiv = this.createHTMLDivElement(\"delete_container\", true, \"Click to delete \" + TSWebAPI._entityName + \" record\");\n    // Render button to invoke DeleteRecord Web API call\n    this._deleteRecordButton = this.createHTMLButtonElement(\"Select record to delete\", \"delete_button\", null, this.deleteButtonOnClickHandler.bind(this));\n    // Append elements to custom control container div\n    this._container.appendChild(headerDiv);\n    this._container.appendChild(this._deleteRecordButton);\n  };\n  /**\r\n  * Renders example use of RetrieveMultiple Web API with OData\r\n  */\n  TSWebAPI.prototype.renderODataRetrieveMultipleExample = function () {\n    var containerClassName = \"odata_status_container\";\n    // Create header label for Web API sample\n    var statusDivHeader = this.createHTMLDivElement(containerClassName, true, \"Click to refresh record count\");\n    this._odataStatusContainerDiv = this.createHTMLDivElement(containerClassName, false, undefined);\n    // Create button to invoke OData RetrieveMultiple Example\n    this._fetchXmlRefreshButton = this.createHTMLButtonElement(\"Refresh record count\", \"odata_refresh\", null, this.refreshRecordCountButtonOnClickHandler.bind(this));\n    // Append HTML elements to custom control container div\n    this._container.appendChild(statusDivHeader);\n    this._container.appendChild(this._odataStatusContainerDiv);\n    this._container.appendChild(this._fetchXmlRefreshButton);\n  };\n  /**\r\n  * Renders example use of RetrieveMultiple Web API with Fetch XML\r\n  */\n  TSWebAPI.prototype.renderFetchXmlRetrieveMultipleExample = function () {\n    var containerName = \"fetchxml_status_container\";\n    // Create header label for Web API sample\n    var statusDivHeader = this.createHTMLDivElement(containerName, true, \"Click to calculate average value of \" + TSWebAPI._currencyAttributeNameFriendlyName);\n    var statusDiv = this.createHTMLDivElement(containerName, false, undefined);\n    // Create button to invoke Fetch XML RetrieveMultiple Web API example\n    this._oDataRefreshButton = this.createHTMLButtonElement(\"Calculate average value of \" + TSWebAPI._currencyAttributeNameFriendlyName, \"odata_refresh\", null, this.calculateAverageButtonOnClickHandler.bind(this));\n    // Append HTML Elements to custom control container div\n    this._container.appendChild(statusDivHeader);\n    this._container.appendChild(statusDiv);\n    this._container.appendChild(this._oDataRefreshButton);\n  };\n  // Name of entity to use for example Web API calls that are performed by this control\n  TSWebAPI._entityName = \"account\";\n  // Required field on _entityName of type 'single line of text'\n  // Example Web API calls that are performed by the example custom control will set this field for new record creation examples\n  TSWebAPI._requiredAttributeName = \"name\";\n  // Value that the _requiredAttributeName field will be set to for new created records\n  TSWebAPI._requiredAttributeValue = \"Web API Custom Control (Sample)\";\n  // Name of currency field on _entityName to populate during record create\n  // Example Web API calls that are performed by the example custom control will set and read this field\n  TSWebAPI._currencyAttributeName = \"revenue\";\n  // Friendly name of currency field (only used for control UI - no functional impact)\n  TSWebAPI._currencyAttributeNameFriendlyName = \"annual revenue\";\n  return TSWebAPI;\n}();\nexports.TSWebAPI = TSWebAPI;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./TSWebAPI/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./TSWebAPI/index.ts"](0, __webpack_exports__);
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('SampleNamespace.TSWebAPI', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.TSWebAPI);
} else {
	var SampleNamespace = SampleNamespace || {};
	SampleNamespace.TSWebAPI = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.TSWebAPI;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}