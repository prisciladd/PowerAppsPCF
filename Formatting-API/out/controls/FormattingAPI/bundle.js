/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./FormattingAPI/index.ts":
/*!********************************!*\
  !*** ./FormattingAPI/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FormattingAPI = void 0;\nvar FormattingAPI = /** @class */function () {\n  /**\r\n   * Empty constructor.\r\n   */\n  function FormattingAPI() {}\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n  FormattingAPI.prototype.init = function (context, notifyOutputChanged, state, container) {\n    this._notifyOutputChanged = notifyOutputChanged;\n    this._controlViewRendered = false;\n    this._context = context;\n    this._container = document.createElement(\"div\");\n    this._container.classList.add(\"TSFormatting_Container\");\n    container.appendChild(this._container);\n  };\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n  FormattingAPI.prototype.updateView = function (context) {\n    if (!this._controlViewRendered) {\n      // Render and add HTMLTable to the custom control container element\n      var tableElement = this.createHTMLTableElement();\n      this._container.appendChild(tableElement);\n      this._controlViewRendered = true;\n    }\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n  FormattingAPI.prototype.getOutputs = function () {\n    return {};\n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  FormattingAPI.prototype.destroy = function () {\n    // Add code to cleanup control if necessary\n  };\n  /**\r\n  * Helper method to create an HTML Table Row Element\r\n  * @param key : string value to show in left column cell\r\n  * @param value : string value to show in right column cell\r\n  * @param isHeaderRow : true if method should generate a header row\r\n  */\n  FormattingAPI.prototype.createHTMLTableRowElement = function (key, value, isHeaderRow) {\n    var keyCell = this.createHTMLTableCellElement(key, \"FormattingControlSampleHtmlTable_HtmlCell_Key\", isHeaderRow);\n    var valueCell = this.createHTMLTableCellElement(value, \"FormattingControlSampleHtmlTable_HtmlCell_Value\", isHeaderRow);\n    var rowElement = document.createElement(\"tr\");\n    rowElement.setAttribute(\"class\", \"FormattingControlSampleHtmlTable_HtmlRow\");\n    rowElement.appendChild(keyCell);\n    rowElement.appendChild(valueCell);\n    return rowElement;\n  };\n  /**\r\n  * Helper method to create an HTML Table Cell Element\r\n  * @param cellValue : string value to inject in the cell\r\n  * @param className : class name for the cell\r\n  * @param isHeaderRow : true if method should generate a header row cell\r\n  */\n  FormattingAPI.prototype.createHTMLTableCellElement = function (cellValue, className, isHeaderRow) {\n    var cellElement;\n    if (isHeaderRow) {\n      cellElement = document.createElement(\"th\");\n      cellElement.setAttribute(\"class\", \"FormattingControlSampleHtmlTable_HtmlHeaderCell \" + className);\n      var textElement = document.createTextNode(cellValue);\n      cellElement.appendChild(textElement);\n    } else {\n      cellElement = document.createElement(\"td\");\n      cellElement.setAttribute(\"class\", \"FormattingControlSampleHtmlTable_HtmlCell \" + className);\n      var textElement = document.createTextNode(cellValue);\n      cellElement.appendChild(textElement);\n    }\n    return cellElement;\n  };\n  /**\r\n  * Creates an HTML Table that showcases examples of basic methods available to the custom control\r\n  * The left column of the table shows the method name or property that is being used\r\n  * The right column of the table shows the result of that method name or property\r\n  */\n  FormattingAPI.prototype.createHTMLTableElement = function () {\n    // Create HTML Table Element\n    var tableElement = document.createElement(\"table\");\n    tableElement.setAttribute(\"class\", \"FormattingControlSampleHtmlTable_HtmlTable\");\n    // Create header row for table\n    var key = \"Example Method\";\n    var value = \"Result\";\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, true));\n    // Example use of formatCurrency() method\n    // Change the default currency and the precision or pass in the precision and currency as additional parameters.\n    key = \"formatCurrency()\";\n    value = this._context.formatting.formatCurrency(10250030);\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    // Example use of formatDecimal() method\n    // Change the settings from user settings to see the output change its format accordingly\n    key = \"formatDecimal()\";\n    value = this._context.formatting.formatDecimal(123456.2782);\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    // Example use of formatInteger() method\n    // change the settings from user settings to see the output change its format accordingly.\n    key = \"formatInteger()\";\n    value = this._context.formatting.formatInteger(12345);\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    // Example use of formatLanguage() method\n    // Install additional languages and pass in the corresponding language code to see its string value\n    key = \"formatLanguage()\";\n    value = this._context.formatting.formatLanguage(1033);\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    // Example of formatDateYearMonth() method\n    // Pass a JavaScript Data object set to the current time into formatDateYearMonth method to format the data\n    // and get the return in Year, Month format\n    key = \"formatDateYearMonth()\";\n    value = this._context.formatting.formatDateYearMonth(new Date());\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    // Example of getWeekOfYear() method\n    // Pass a JavaScript Data object set to the current time into getWeekOfYear method to get the value for week of the year\n    key = \"getWeekOfYear()\";\n    value = this._context.formatting.getWeekOfYear(new Date()).toString();\n    tableElement.appendChild(this.createHTMLTableRowElement(key, value, false));\n    return tableElement;\n  };\n  return FormattingAPI;\n}();\nexports.FormattingAPI = FormattingAPI;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./FormattingAPI/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./FormattingAPI/index.ts"](0, __webpack_exports__);
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('SampleNamespace.FormattingAPI', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.FormattingAPI);
} else {
	var SampleNamespace = SampleNamespace || {};
	SampleNamespace.FormattingAPI = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.FormattingAPI;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}